// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hackweek_backend.Data;

#nullable disable

namespace hackweek_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231013003355_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("hackweek_backend.Models.CriterionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("hackweek_backend.Models.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 10, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            IsClosed = false,
                            Name = "+Devs2Blu HackWeek 2023",
                            StartDate = new DateTime(2023, 10, 31, 0, 0, 1, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("hackweek_backend.Models.GlobalModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrentEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentEventId")
                        .IsUnique()
                        .HasFilter("[CurrentEventId] IS NOT NULL");

                    b.ToTable("Global");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentEventId = 1
                        });
                });

            modelBuilder.Entity("hackweek_backend.Models.GroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("DateOffset")
                        .HasColumnType("bigint");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<long>("FinalGrade")
                        .HasColumnType("bigint");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PropositionId")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropositionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("EventId", "ProjectName")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("hackweek_backend.Models.GroupRatingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Grade")
                        .HasColumnType("bigint");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PropositionCriterionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PropositionCriterionId");

                    b.ToTable("GroupRatings");
                });

            modelBuilder.Entity("hackweek_backend.Models.PropositionCriterionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CriterionId")
                        .HasColumnType("int");

                    b.Property<int>("PropositionId")
                        .HasColumnType("int");

                    b.Property<long>("Weight")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.HasIndex("PropositionId");

                    b.ToTable("PropositionsCriteria");
                });

            modelBuilder.Entity("hackweek_backend.Models.PropositionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Propositions");
                });

            modelBuilder.Entity("hackweek_backend.Models.RatingCriterionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CriterionId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.HasIndex("RatingId");

                    b.ToTable("RatingCriteria");
                });

            modelBuilder.Entity("hackweek_backend.Models.RatingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("hackweek_backend.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId", "Username")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            PasswordHash = "$2a$11$PX7TsFOD6f8Ct0dyIq6GtOCZXHfese8cphh3LO/Iqn2AKqRths2um",
                            Role = "admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("hackweek_backend.Models.GlobalModel", b =>
                {
                    b.HasOne("hackweek_backend.Models.EventModel", "CurrentEvent")
                        .WithOne()
                        .HasForeignKey("hackweek_backend.Models.GlobalModel", "CurrentEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentEvent");
                });

            modelBuilder.Entity("hackweek_backend.Models.GroupModel", b =>
                {
                    b.HasOne("hackweek_backend.Models.EventModel", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("hackweek_backend.Models.PropositionModel", "Proposition")
                        .WithMany()
                        .HasForeignKey("PropositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("hackweek_backend.Models.UserModel", "User")
                        .WithOne()
                        .HasForeignKey("hackweek_backend.Models.GroupModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Proposition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hackweek_backend.Models.GroupRatingModel", b =>
                {
                    b.HasOne("hackweek_backend.Models.GroupModel", "Group")
                        .WithMany("GroupRatings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hackweek_backend.Models.PropositionCriterionModel", "PropositionCriterion")
                        .WithMany()
                        .HasForeignKey("PropositionCriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("PropositionCriterion");
                });

            modelBuilder.Entity("hackweek_backend.Models.PropositionCriterionModel", b =>
                {
                    b.HasOne("hackweek_backend.Models.CriterionModel", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hackweek_backend.Models.PropositionModel", "Proposition")
                        .WithMany("PropositionCriteria")
                        .HasForeignKey("PropositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("Proposition");
                });

            modelBuilder.Entity("hackweek_backend.Models.PropositionModel", b =>
                {
                    b.HasOne("hackweek_backend.Models.EventModel", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("hackweek_backend.Models.RatingCriterionModel", b =>
                {
                    b.HasOne("hackweek_backend.Models.CriterionModel", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hackweek_backend.Models.RatingModel", "Rating")
                        .WithMany("RatingCriteria")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("hackweek_backend.Models.RatingModel", b =>
                {
                    b.HasOne("hackweek_backend.Models.GroupModel", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("hackweek_backend.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("hackweek_backend.Models.UserModel", b =>
                {
                    b.HasOne("hackweek_backend.Models.EventModel", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");
                });

            modelBuilder.Entity("hackweek_backend.Models.GroupModel", b =>
                {
                    b.Navigation("GroupRatings");
                });

            modelBuilder.Entity("hackweek_backend.Models.PropositionModel", b =>
                {
                    b.Navigation("PropositionCriteria");
                });

            modelBuilder.Entity("hackweek_backend.Models.RatingModel", b =>
                {
                    b.Navigation("RatingCriteria");
                });
#pragma warning restore 612, 618
        }
    }
}
